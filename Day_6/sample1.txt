we learnt =>
day 2 = basic python like printinng hello world, etc.
day 3 = about matplotlib library, bar graph & basic functions
day 4  more graphs, line chart & ie chart
Basic Git Commands

1. git config --global user.name "Your Name" - setting up git
   git config --global user.email "your-email@example.com"
2. git init - Initializes a new Git repository in the current directory.
3. git clone <repository_url> - Clones an existing GitHub repository to your local machine.
4. git status - Shows the current status of your repository (modified, staged, untracked files).
5. git add . - Stages all changes in the current directory.
6. git add <filename> - Stages a specific file.
7. git commit -m "Your commit message" - Commits staged changes with a message.
8. git push origin <branch-name> - Pushes local changes to the remote repository.
9. git pull origin <branch-name> - Fetches and merges the latest changes from the remote repository.
10. git log - Shows commit history.
11. git branch <new-branch-name> - Creates a new branch.
12. git checkout -b <new-branch-name> - Creates and switches to a new branch.
13. git remote add origin <repository_url> - Links your local repository to a remote repository.
14. git remote -v - Shows the remote repository is linked to local repository.


Basic Linux Commands

1. ls -  Lists files in the current directory.
2. cd <directory> - Changes directory.
3. cd .. -  Moves up one directory level.
4. pwd - Displays the current directory path.
5. mkdir <directory-name> - Creates a new directory.
6. rm <filename> - Deletes a file.
7. cls -  Clears the screen in the Windows Command Prompt.
8. touch filename.txt - Creates an empty file if it doesn’t exist or updates it.


Python Command
1. python -m venv myenv - Creates a virtual environment named myenv in the current directory.
2. myenv/Scripts/activate - Activate virtual environment
3. deactivate - Exits the virtual environment and returns to the system’s Python.


Matplotlib Bar Chart 
1. Import Library:
   Use import matplotlib.pyplot as plt to load the Matplotlib library for creating visualizations.

2. Define Data:
   Create two lists: one for the categories (e.g., Fruits) and the other for the corresponding values (e.g., Quantity).

3. Create Bar Chart:
   Use plt.bar() to generate the bar chart. Customize the bars' appearance, such as:
   Colors for the bars.
   Bar Width and Edge Styles.
   Transparency (alpha) to control how see-through the bars are.

4. Add Labels & Titles:
   Improve chart readability by adding:
   X-axis Label with plt.xlabel().
   Y-axis Label with plt.ylabel().
   Title with plt.title().

5. Display the Chart:
   Finally, use plt.show() to display the chart on screen.


Matplotlib Pie Chart 
1. Import Library:
   Use import matplotlib.pyplot as plt to load the Matplotlib library for creating visualizations.

2. Define Data:
   Create a list of Subjects (e.g., DSA, Web Development, OS, AI) and a corresponding list of Marks (e.g., 90, 80, 85, 95).

3. Create Pie Chart:
   Use plt.pie() to create the pie chart with the following customizations:
   Explode Effect to highlight the DSA slice (myexplode = [0.2, 0, 0, 0]).
   Color Scheme for each slice using mycolors.
   Start Angle set to 90° and slices arranged in a counterclockwise direction.
   Percentage Display showing the distribution of marks using autopct="%0.2f%%".
   Shadow Effect for a 3D appearance.
   Label Positioning slightly outward (labeldistance=1.2).
   Border Styling with grey edges and linewidth of 2.

4. Add Title:
   Title the chart "Marks in different Subject" with a font size of 15, bold text, and padding of 20 for spacing.

5. Display the Chart:
   Use plt.show() to display the pie chart.


Matplotlib Plot
1. Import Library:
   Use import matplotlib.pyplot as plt to load Matplotlib for creating visualizations.

2. Define Data:
   First Plot (Sales & Price over Days):
   Days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
   Sales and Price data: [160, 150, 140, 145, 175, 165, 180] and [174, 160, 185, 150, 160, 175, 190].

   Second Plot (Marks in Different Subjects):
   Subjects: ["DBMS", "CC", "OS", "AIML", "DSA", "Python", "TOC"]
   Marks: [75, 80, 65, 74, 90, 84, 70].

3. Create Plots:
   First Subplot (Sales and Price):
   Line plots for Sales and Price with distinct markers (s for square, o for circle), line colors, and customizations (marker size, color, edge color, and line width).
   Second Subplot (Marks):
   Line plot for Marks with square markers and orange color.

4. Customization:
   Legends: Displayed for both plots with fontsize=8.
   Titles: Set titles with bold text and specific font size (fontsize=15).
   Labels: X and Y-axis labels with specific font size and color.
   Grid: Added to both plots with grey lines, alpha=0.4, and a linewidth=0.5.

5. Display:
   Use plt.subplot(1, 2, 1) and plt.subplot(1, 2, 2) to create two subplots side by side.
   Use plt.show() to display the final visualization.


Cloning a FastAPI Repository

Inside the bootcoding folder,a new folder named clone was created.
we navigate to the clone folder and opened cmd from there.
In the command prompt(cmd),type the command "code ." to open vs code with clone folder.
To clone FastAPI repository,we have copied the FastAPI repository url from gitingest.
Then,we used the command "git clone <url>" to clone FastAPI repository.
After cloning, we have studied the directory structure of the FastAPI.